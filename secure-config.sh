#!/bin/bash

# Script pour s√©curiser la configuration FreqTrad
# Usage: ./secure-config.sh

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_message() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_message "=== S√©curisation de la Configuration FreqTrad ==="

# 1. G√©n√©rer une cl√© JWT s√©curis√©e
print_message "G√©n√©ration d'une cl√© JWT s√©curis√©e..."
JWT_SECRET=$(openssl rand -hex 32)
print_success "Cl√© JWT g√©n√©r√©e: ${JWT_SECRET:0:16}..."

# 2. G√©n√©rer un mot de passe s√©curis√©
print_message "G√©n√©ration d'un mot de passe s√©curis√©..."
API_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-16)
print_success "Mot de passe g√©n√©r√©: ${API_PASSWORD:0:8}..."

# 3. Cr√©er un fichier .env s√©curis√©
print_message "Cr√©ation du fichier .env s√©curis√©..."
cat > .env << EOF
# Configuration FreqTrad - S√©curis√©
BINANCE_API_KEY=your_binance_api_key_here
BINANCE_SECRET=your_binance_secret_here

# Telegram Bot
TELEGRAM_TOKEN=your_telegram_token_here
TELEGRAM_CHAT_ID=your_telegram_chat_id_here

# API Server - S√©curis√©
JWT_SECRET=$JWT_SECRET
API_USERNAME=admin
API_PASSWORD=$API_PASSWORD
EOF

print_success "Fichier .env cr√©√© avec des valeurs s√©curis√©es"

# 4. Mettre √† jour config-test.json
print_message "Mise √† jour de config-test.json..."
if [ -f "config-test.json" ]; then
    # Sauvegarder l'ancien fichier
    cp config-test.json config-test.json.backup
    
    # Mettre √† jour la configuration
    sed -i "s/\"listen_ip_address\": \".*\"/\"listen_ip_address\": \"127.0.0.1\"/" config-test.json
    sed -i "s/\"jwt_secret\": \".*\"/\"jwt_secret\": \"$JWT_SECRET\"/" config-test.json
    sed -i "s/\"password\": \".*\"/\"password\": \"$API_PASSWORD\"/" config-test.json
    
    print_success "config-test.json mis √† jour"
else
    print_warning "config-test.json non trouv√©"
fi

# 5. Mettre √† jour config.json
print_message "Mise √† jour de config.json..."
if [ -f "config.json" ]; then
    # Sauvegarder l'ancien fichier
    cp config.json config.json.backup
    
    # Mettre √† jour la configuration
    sed -i "s/\"listen_ip_address\": \".*\"/\"listen_ip_address\": \"127.0.0.1\"/" config.json
    sed -i "s/\"jwt_secret\": \".*\"/\"jwt_secret\": \"$JWT_SECRET\"/" config.json
    sed -i "s/\"password\": \".*\"/\"password\": \"$API_PASSWORD\"/" config.json
    
    print_success "config.json mis √† jour"
else
    print_warning "config.json non trouv√©"
fi

# 6. Cr√©er un fichier de configuration pour l'acc√®s externe (optionnel)
print_message "Cr√©ation d'un fichier de configuration pour l'acc√®s externe..."
cat > config-external.json << EOF
{
    "api_server": {
        "enabled": true,
        "listen_ip_address": "0.0.0.0",
        "listen_port": 8080,
        "verbosity": "error",
        "enable_openapi": false,
        "jwt_secret": "$JWT_SECRET",
        "CORS_origins": [
            "http://localhost:8080",
            "http://127.0.0.1:8080",
            "https://yourdomain.com"
        ],
        "username": "admin",
        "password": "$API_PASSWORD"
    }
}
EOF

print_success "config-external.json cr√©√© pour l'acc√®s externe"

# 7. Red√©marrer FreqTrad si en cours d'ex√©cution
if pgrep -f "freqtrade" > /dev/null; then
    print_message "FreqTrad en cours d'ex√©cution, red√©marrage n√©cessaire..."
    
    if systemctl is-active --quiet freqtrade 2>/dev/null; then
        print_message "Red√©marrage via systemd..."
        sudo systemctl restart freqtrade
        print_success "Service red√©marr√©"
    else
        print_message "Arr√™t des processus FreqTrad..."
        pkill -f freqtrade
        sleep 2
        print_message "Red√©marrage de FreqTrad..."
        if [ -f "start.sh" ]; then
            ./start.sh &
        fi
    fi
fi

# 8. Afficher les informations de s√©curit√©
print_success "=== Configuration S√©curis√©e ! ==="
echo
print_message "Informations de s√©curit√©:"
echo "  - Adresse IP: 127.0.0.1 (acc√®s local uniquement)"
echo "  - Port: 8080"
echo "  - JWT Secret: ${JWT_SECRET:0:16}..."
echo "  - Mot de passe: ${API_PASSWORD:0:8}..."
echo
print_message "Acc√®s √† l'interface:"
echo "  - Local: http://localhost:8080"
echo "  - Local: http://127.0.0.1:8080"
echo
print_message "Pour l'acc√®s externe:"
echo "  - Utilisez config-external.json"
echo "  - Configurez un reverse proxy (nginx)"
echo "  - Utilisez HTTPS avec certificat SSL"
echo
print_warning "S√©curit√©:"
echo "  - L'API n'est accessible que localement"
echo "  - JWT secret s√©curis√© g√©n√©r√©"
echo "  - Mot de passe fort g√©n√©r√©"
echo "  - CORS configur√© pour localhost uniquement"
echo
print_success "Configuration s√©curis√©e termin√©e ! üîí"
